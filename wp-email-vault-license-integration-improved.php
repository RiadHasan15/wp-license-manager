<?php
/**
 * Complete License and Update Integration for wp-email-vault
 * Generated by WP Licensing Manager - IMPROVED VERSION
 * 
 * Add this code to your premium plugin to enable licensing and automatic updates.
 * 
 * USAGE:
 * 1. Place this file in your wp-email-vault plugin directory
 * 2. Include it in your main plugin file:
 *    require_once plugin_dir_path(__FILE__) . 'license-integration.php';
 * 3. Initialize in your main plugin file:
 *    new Wp_email_vault_License_Manager(__FILE__, '1.0.0');
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class Wp_email_vault_License_Manager {
    
    private $plugin_file;
    private $plugin_slug;
    private $version;
    private $license_server_url;
    private $license_key;
    private $admin_notices = array();
    
    public function __construct($plugin_file, $version) {
        $this->plugin_file = $plugin_file;
        $this->plugin_slug = 'wp-email-vault';
        $this->version = $version;
        $this->license_server_url = 'https://stackcastle.com';
        $this->license_key = get_option($this->plugin_slug . '_license_key');
        
        // Initialize hooks
        add_action('admin_init', array($this, 'init'));
        add_action('admin_menu', array($this, 'license_menu'));
        add_filter('pre_set_site_transient_update_plugins', array($this, 'check_for_update'));
        add_filter('plugins_api', array($this, 'plugins_api_filter'), 10, 3);
        add_action('admin_notices', array($this, 'display_admin_notices'));
        
        // License status check on plugin pages
        add_action('admin_init', array($this, 'periodic_license_check'));
        
        // Add settings link to plugins page
        add_filter('plugin_action_links_' . plugin_basename($plugin_file), array($this, 'add_settings_link'));
    }
    
    public function init() {
        // Handle license actions
        if (isset($_POST['activate_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->activate_license();
        }
        
        if (isset($_POST['deactivate_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->deactivate_license();
        }
        
        if (isset($_POST['check_license']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->check_license_status();
        }
        
        if (isset($_POST['force_update_check']) && wp_verify_nonce($_POST['license_nonce'], 'license_nonce')) {
            $this->force_update_check();
        }
    }
    
    public function license_menu() {
        add_options_page(
            'WP Email Vault License',
            'WP Email Vault License',
            'manage_options',
            $this->plugin_slug . '-license',
            array($this, 'license_page')
        );
    }
    
    public function license_page() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        $status = get_option($this->plugin_slug . '_license_status');
        $last_check = get_option($this->plugin_slug . '_license_last_check');
        $license_data = get_option($this->plugin_slug . '_license_data', array());
        
        ?>
        <div class="wrap">
            <h1>WP Email Vault License Settings</h1>
            
            <div class="card" style="max-width: 700px;">
                <h2>License Management</h2>
                
                <form method="post" action="">
                    <?php wp_nonce_field('license_nonce', 'license_nonce'); ?>
                    
                    <table class="form-table">
                        <tr>
                            <th scope="row">License Key</th>
                            <td>
                                <input type="text" name="license_key" value="<?php echo esc_attr($license_key); ?>" 
                                       class="regular-text" placeholder="Enter your license key" />
                                <p class="description">Enter the license key you received after purchase.</p>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Status</th>
                            <td>
                                <?php $this->display_license_status($status, $license_data); ?>
                                
                                <?php if ($last_check): ?>
                                    <p class="description">Last checked: <?php echo date('Y-m-d H:i:s', $last_check); ?></p>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Current Version</th>
                            <td>
                                <?php echo esc_html($this->version); ?>
                                <?php
                                $remote_version = get_transient($this->plugin_slug . '_remote_version');
                                if ($remote_version && version_compare($this->version, $remote_version, '<')):
                                ?>
                                    <span style="color: #d63384; font-weight: bold; margin-left: 10px;">
                                        (Update available: v<?php echo esc_html($remote_version); ?>)
                                    </span>
                                <?php endif; ?>
                            </td>
                        </tr>
                        
                        <?php if (!empty($license_data)): ?>
                        <tr>
                            <th scope="row">License Details</th>
                            <td>
                                <div style="background: #f8f9fa; padding: 15px; border-radius: 4px; border-left: 4px solid #007cba;">
                                    <?php if (isset($license_data['customer_email'])): ?>
                                        <p><strong>Licensed to:</strong> <?php echo esc_html($license_data['customer_email']); ?></p>
                                    <?php endif; ?>
                                    
                                    <?php if (isset($license_data['expires_at']) && $license_data['expires_at'] !== '0000-00-00'): ?>
                                        <p><strong>Expires:</strong> <?php echo date('F j, Y', strtotime($license_data['expires_at'])); ?></p>
                                    <?php else: ?>
                                        <p><strong>License Type:</strong> Lifetime</p>
                                    <?php endif; ?>
                                    
                                    <?php if (isset($license_data['activations']) && isset($license_data['max_activations'])): ?>
                                        <p><strong>Activations:</strong> <?php echo intval($license_data['activations']); ?> / <?php echo intval($license_data['max_activations']); ?> sites</p>
                                    <?php endif; ?>
                                </div>
                            </td>
                        </tr>
                        <?php endif; ?>
                    </table>
                    
                    <p class="submit">
                        <?php if ($status == 'valid'): ?>
                            <input type="submit" name="deactivate_license" value="Deactivate License" class="button" />
                            <input type="submit" name="check_license" value="Check Status" class="button" />
                            <input type="submit" name="force_update_check" value="Check for Updates Now" class="button-secondary" />
                            <input type="hidden" name="force-check" value="1" />
                        <?php else: ?>
                            <input type="submit" name="activate_license" value="Activate License" class="button-primary" />
                        <?php endif; ?>
                    </p>
                </form>
            </div>
            
            <!-- API Information -->
            <div class="card" style="max-width: 700px; margin-top: 20px;">
                <h2>API Information</h2>
                <table class="form-table">
                    <tr>
                        <th scope="row">License Server</th>
                        <td><code><?php echo esc_html($this->license_server_url); ?></code></td>
                    </tr>
                    <tr>
                        <th scope="row">Product Slug</th>
                        <td><code><?php echo esc_html($this->plugin_slug); ?></code></td>
                    </tr>
                    <tr>
                        <th scope="row">Domain</th>
                        <td><code><?php echo esc_html(parse_url(home_url(), PHP_URL_HOST)); ?></code></td>
                    </tr>
                </table>
            </div>
        </div>
        
        <style>
        .card { background: #fff; border: 1px solid #ccd0d4; padding: 20px; border-radius: 4px; }
        .card h2 { margin-top: 0; }
        .license-status { padding: 8px 12px; border-radius: 4px; font-weight: bold; display: inline-block; }
        .status-valid { background: #d1e7dd; color: #0f5132; }
        .status-invalid { background: #f8d7da; color: #721c24; }
        .status-expired { background: #fff3cd; color: #856404; }
        .status-inactive { background: #e2e3e5; color: #41464b; }
        </style>
        <?php
    }
    
    private function display_license_status($status, $license_data) {
        switch ($status) {
            case 'valid':
                echo '<span class="license-status status-valid">✓ Active & Valid</span>';
                echo '<p class="description">Your license is active and updates are enabled.</p>';
                break;
            case 'invalid':
                echo '<span class="license-status status-invalid">✗ Invalid</span>';
                echo '<p class="description">Please check your license key and try again.</p>';
                break;
            case 'expired':
                echo '<span class="license-status status-expired">⚠ Expired</span>';
                echo '<p class="description">Your license has expired. Please renew to continue receiving updates.</p>';
                break;
            case 'inactive':
                echo '<span class="license-status status-inactive">○ Deactivated</span>';
                echo '<p class="description">License was deactivated from this domain.</p>';
                break;
            default:
                echo '<span class="license-status status-inactive">○ Not Activated</span>';
                echo '<p class="description">Enter your license key and activate to enable updates.</p>';
        }
    }
    
    public function activate_license() {
        if (!isset($_POST['license_key']) || empty($_POST['license_key'])) {
            $this->add_admin_notice('Please enter a license key.', 'error');
            return;
        }
        
        $license_key = sanitize_text_field($_POST['license_key']);
        $domain = parse_url(home_url(), PHP_URL_HOST);
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/activate', array(
            'body' => array(
                'license_key' => $license_key,
                'domain' => $domain,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true,
            'headers' => array(
                'User-Agent' => 'WP-Email-Vault/' . $this->version . '; ' . home_url()
            )
        ));
        
        if (is_wp_error($response)) {
            update_option($this->plugin_slug . '_license_status', 'error');
            $this->add_admin_notice('Connection Error: ' . $response->get_error_message(), 'error');
            return;
        }
        
        $body = json_decode(wp_remote_retrieve_body($response), true);
        
        if (isset($body['success']) && $body['success']) {
            update_option($this->plugin_slug . '_license_key', $license_key);
            update_option($this->plugin_slug . '_license_status', 'valid');
            update_option($this->plugin_slug . '_license_last_check', time());
            
            // Store additional license data if provided
            if (isset($body['license'])) {
                update_option($this->plugin_slug . '_license_data', $body['license']);
            }
            
            // Clear update cache to check for updates immediately
            delete_transient($this->plugin_slug . '_remote_version');
            delete_site_transient('update_plugins');
            
            $this->add_admin_notice('License activated successfully! Updates are now enabled.', 'success');
        } else {
            update_option($this->plugin_slug . '_license_status', 'invalid');
            $error_message = isset($body['error']) ? $body['error'] : 'Unknown error occurred';
            $this->add_admin_notice('Activation Error: ' . $error_message, 'error');
        }
    }
    
    public function deactivate_license() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        $domain = parse_url(home_url(), PHP_URL_HOST);
        
        if (empty($license_key)) {
            $this->add_admin_notice('No license key found to deactivate.', 'error');
            return;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/deactivate', array(
            'body' => array(
                'license_key' => $license_key,
                'domain' => $domain,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true,
            'headers' => array(
                'User-Agent' => 'WP-Email-Vault/' . $this->version . '; ' . home_url()
            )
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success']) {
                update_option($this->plugin_slug . '_license_status', 'inactive');
                $this->add_admin_notice('License deactivated successfully.', 'success');
            } else {
                $error = isset($body['error']) ? $body['error'] : 'Deactivation failed';
                $this->add_admin_notice($error, 'warning');
            }
        } else {
            update_option($this->plugin_slug . '_license_status', 'inactive');
            $this->add_admin_notice('License deactivated locally (server unreachable).', 'warning');
        }
        
        // Clear license data
        delete_option($this->plugin_slug . '_license_data');
    }
    
    public function check_license_status() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            $this->add_admin_notice('No license key found.', 'error');
            return;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/validate', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug
            ),
            'timeout' => 30,
            'sslverify' => true,
            'headers' => array(
                'User-Agent' => 'WP-Email-Vault/' . $this->version . '; ' . home_url()
            )
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success']) {
                update_option($this->plugin_slug . '_license_status', 'valid');
                update_option($this->plugin_slug . '_license_last_check', time());
                
                // Store license details
                if (isset($body['license'])) {
                    update_option($this->plugin_slug . '_license_data', $body['license']);
                }
                
                $this->add_admin_notice('License is valid and active!', 'success');
            } else {
                $status = isset($body['status']) ? $body['status'] : 'invalid';
                update_option($this->plugin_slug . '_license_status', $status);
                $error = isset($body['error']) ? $body['error'] : 'License validation failed';
                $this->add_admin_notice($error, 'error');
            }
        } else {
            $this->add_admin_notice('Connection Error: ' . $response->get_error_message(), 'error');
        }
    }
    
    public function force_update_check() {
        // Clear the version cache to force immediate update check
        delete_transient($this->plugin_slug . '_remote_version');
        delete_site_transient('update_plugins');
        
        // Check for updates immediately
        $remote_version = $this->get_remote_version(true);
        
        if ($remote_version && version_compare($this->version, $remote_version, '<')) {
            $this->add_admin_notice(
                sprintf('Update Available! Version %s is now available. Check your WordPress Updates page to install.', $remote_version),
                'info'
            );
        } else {
            $this->add_admin_notice('No updates available. You have the latest version!', 'success');
        }
    }
    
    public function check_for_update($transient) {
        if (empty($transient->checked)) {
            return $transient;
        }
        
        $plugin_basename = plugin_basename($this->plugin_file);
        
        if (!isset($transient->checked[$plugin_basename])) {
            return $transient;
        }
        
        // Only check for updates if license is valid
        $status = get_option($this->plugin_slug . '_license_status');
        if ($status !== 'valid') {
            return $transient;
        }
        
        $remote_version = $this->get_remote_version();
        
        if ($remote_version && version_compare($this->version, $remote_version, '<')) {
            $transient->response[$plugin_basename] = (object) array(
                'slug' => dirname($plugin_basename),
                'new_version' => $remote_version,
                'url' => '',
                'package' => $this->get_download_url()
            );
        }
        
        return $transient;
    }
    
    public function plugins_api_filter($res, $action, $args) {
        if ($action != 'plugin_information') {
            return $res;
        }
        
        if ($args->slug != dirname(plugin_basename($this->plugin_file))) {
            return $res;
        }
        
        $remote_version = $this->get_remote_version();
        $changelog = $this->get_changelog();
        
        return (object) array(
            'name' => 'WP Email Vault',
            'slug' => dirname(plugin_basename($this->plugin_file)),
            'version' => $remote_version ?: $this->version,
            'author' => 'StackCastle',
            'homepage' => 'https://stackcastle.com/',
            'requires' => '5.0',
            'tested' => '6.4',
            'downloaded' => 0,
            'last_updated' => date('Y-m-d'),
            'sections' => array(
                'description' => 'Premium email management plugin with advanced licensing and automatic updates.',
                'changelog' => $changelog ?: 'Check the plugin changelog for the latest updates and improvements.'
            ),
            'download_link' => $this->get_download_url()
        );
    }
    
    private function get_remote_version($force = false) {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return false;
        }
        
        // Cache remote version check for 1 hour
        $cache_key = $this->plugin_slug . '_remote_version';
        $cached_version = get_transient($cache_key);
        
        if ($cached_version !== false && !$force) {
            return $cached_version;
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/update-check', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug,
                'current_version' => $this->version
            ),
            'timeout' => 30,
            'sslverify' => true,
            'headers' => array(
                'User-Agent' => 'WP-Email-Vault/' . $this->version . '; ' . home_url()
            )
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success'] && isset($body['latest_version'])) {
                $remote_version = $body['latest_version'];
                set_transient($cache_key, $remote_version, 1 * HOUR_IN_SECONDS);
                return $remote_version;
            }
        }
        
        return false;
    }
    
    private function get_changelog() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return '';
        }
        
        $response = wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/update-check', array(
            'body' => array(
                'license_key' => $license_key,
                'product_slug' => $this->plugin_slug,
                'current_version' => $this->version
            ),
            'timeout' => 30,
            'sslverify' => true,
            'headers' => array(
                'User-Agent' => 'WP-Email-Vault/' . $this->version . '; ' . home_url()
            )
        ));
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            
            if (isset($body['success']) && $body['success'] && isset($body['changelog'])) {
                return $body['changelog'];
            }
        }
        
        return '';
    }
    
    private function get_download_url() {
        $license_key = get_option($this->plugin_slug . '_license_key');
        
        if (empty($license_key)) {
            return '';
        }
        
        return $this->license_server_url . '/wp-json/licensing/v1/update-download?license_key=' . 
               urlencode($license_key) . '&product_slug=' . urlencode($this->plugin_slug);
    }
    
    public function periodic_license_check() {
        $last_check = get_option($this->plugin_slug . '_license_last_check', 0);
        $check_interval = 24 * HOUR_IN_SECONDS; // Check once per day
        
        if ((time() - $last_check) > $check_interval) {
            $license_key = get_option($this->plugin_slug . '_license_key');
            if (!empty($license_key)) {
                // Perform background license validation
                wp_remote_post($this->license_server_url . '/wp-json/licensing/v1/validate', array(
                    'body' => array(
                        'license_key' => $license_key,
                        'product_slug' => $this->plugin_slug
                    ),
                    'timeout' => 15,
                    'blocking' => false, // Non-blocking request
                    'sslverify' => true
                ));
                
                update_option($this->plugin_slug . '_license_last_check', time());
            }
        }
    }
    
    public function add_settings_link($links) {
        $settings_link = '<a href="' . admin_url('options-general.php?page=' . $this->plugin_slug . '-license') . '">License</a>';
        array_unshift($links, $settings_link);
        return $links;
    }
    
    private function add_admin_notice($message, $type = 'info') {
        $this->admin_notices[] = array(
            'message' => $message,
            'type' => $type
        );
    }
    
    public function display_admin_notices() {
        foreach ($this->admin_notices as $notice) {
            echo '<div class="notice notice-' . esc_attr($notice['type']) . ' is-dismissible">';
            echo '<p>' . esc_html($notice['message']) . '</p>';
            echo '</div>';
        }
        $this->admin_notices = array(); // Clear notices after displaying
    }
}

// Initialize the license manager
// USAGE EXAMPLE:
// Add this to your main plugin file (wp-email-vault.php):
// 
// // Include license integration
// if (file_exists(plugin_dir_path(__FILE__) . 'license-integration.php')) {
//     require_once plugin_dir_path(__FILE__) . 'license-integration.php';
//     
//     // Initialize with your plugin file and version
//     new Wp_email_vault_License_Manager(__FILE__, '1.0.0');
// }
?>